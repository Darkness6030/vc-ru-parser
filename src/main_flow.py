import asyncio
from typing import Match

from aiogram import Dispatcher, Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, CallbackQuery, ForceReply, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import ClientError
from rewire import simple_plugin

from src import api, bot, utils, storage
from src.callbacks import LoadModeCallback, CancelParsingCallback, ParseAllCallback, ParseAmountCallback, RegularParsingCallback, ParseNowCallback, TogglePauseCallback, ParseAccountCallback, AccountInfoCallback, AddAccountCallback, AccountsCallback, PeriodicityCallback, EditAccountCallback, DeleteAccountCallback, MainMenuCallback
from src.schedules import parse_account
from src.states import UserState

plugin = simple_plugin()
router = Router()

menu_keyboard = InlineKeyboardBuilder() \
    .button(text='–í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON', callback_data=LoadModeCallback(mode='json')) \
    .button(text='–í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google —Ç–∞–±–ª–∏—Ü—ã', callback_data=LoadModeCallback(mode='google')) \
    .button(text='–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é', callback_data=RegularParsingCallback()) \
    .adjust(1) \
    .as_markup()

regular_parsing_keyboard = InlineKeyboardBuilder() \
    .button(text='–ù–∞–∑–∞–¥', callback_data=RegularParsingCallback()) \
    .button(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data=MainMenuCallback()) \
    .as_markup()

PARSING_MODES = ['—Ç–∞–±–ª', '—Å–µ—Ä–≤', '–æ–±–∞']


@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    if not bot.is_admin(message.from_user.id):
        return await message.answer('‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

    await state.clear()
    await message.answer('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=menu_keyboard)


@router.callback_query(MainMenuCallback.filter())
async def main_menu_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=menu_keyboard)


@router.callback_query(LoadModeCallback.filter())
async def load_mode_callback(callback: CallbackQuery, callback_data: LoadModeCallback, state: FSMContext):
    await state.set_state(UserState.amount_select)
    await state.update_data(mode=callback_data.mode)
    await callback.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤:',
        reply_markup=InlineKeyboardBuilder()
        .button(text='–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data=ParseAmountCallback())
        .button(text='–í—Å–µ –ø–æ—Å—Ç—ã', callback_data=ParseAllCallback())
        .adjust(1)
        .as_markup()
    )


@router.callback_query(UserState.amount_select, ParseAmountCallback.filter())
async def parse_amount_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.amount_input)
    await callback.message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤:',
        reply_markup=ForceReply()
    )


@router.callback_query(UserState.amount_select, ParseAllCallback.filter())
async def parse_all_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.url_select)
    await state.update_data(amount=None)
    await callback.message.answer(
        '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
        reply_markup=ForceReply()
    )


@router.message(UserState.amount_input)
async def amount_handler(message: Message, state: FSMContext):
    amount = int(message.text) if message.text.isdigit() else 0

    if amount <= 0:
        return await message.answer('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:', reply_markup=ForceReply())

    await state.set_state(UserState.url_select)
    await state.update_data(amount=amount)
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
        reply_markup=ForceReply()
    )


@router.message(UserState.url_select)
async def url_handler(message: Message, state: FSMContext):
    loading_message = await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞...', reply_markup=ReplyKeyboardRemove())
    await loading_message.delete()

    match await state.get_value('mode'):
        case 'json':
            await load_json(message, state)

        case 'google':
            await load_google(message, state)


@router.callback_query(CancelParsingCallback.filter())
async def cancel_parsing_callback(callback: CallbackQuery, state: FSMContext):
    await state.update_data(cancelled=True)
    await callback.message.answer('üõë –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω—ë–Ω.', reply_markup=menu_keyboard)


async def load_json(message: Message, state: FSMContext):
    parsed_args = await utils.parse_url(message.text)
    if not parsed_args:
        return await message.reply('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç URL. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:', reply_markup=ForceReply())

    amount = await state.get_value('amount')
    await state.clear()

    domain, username, user_id = parsed_args
    started_message = await message.reply(
        f'‚è≥ –ù–∞—á–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}...',
        reply_markup=InlineKeyboardBuilder()
        .button(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data=CancelParsingCallback())
        .as_markup()
    )

    try:
        if domain == 'tenchat.ru':
            user_posts = await api.fetch_tenchat_posts(username, amount)
        else:
            user_posts = await api.fetch_user_posts(domain, user_id, amount)
    except ClientError:
        return await started_message.edit_text('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª —Å–±–æ–π.')

    if await state.get_value('cancelled'):
        return await state.clear()

    await started_message.edit_reply_markup()
    await message.answer(
        f'üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {len(user_posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}. –°–æ—Ö—Ä–∞–Ω—è—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä...',
        reply_markup=InlineKeyboardBuilder()
        .button(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data=CancelParsingCallback())
        .as_markup()
    )

    user_posts_path = await utils.download_posts_files(domain, username, user_posts)
    await message.reply_document(
        FSInputFile(user_posts_path),
        caption=f'‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.',
        reply_markup=menu_keyboard
    )


async def load_google(message: Message, state: FSMContext):
    parsed_args = await utils.parse_url(message.text)
    if not parsed_args:
        return await message.reply('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç URL. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:', reply_markup=ForceReply())

    amount = await state.get_value('amount')
    await state.clear()

    domain, username, user_id = parsed_args
    started_message = await message.reply(
        f'‚è≥ –ù–∞—á–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}...',
        reply_markup=InlineKeyboardBuilder()
        .button(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data=CancelParsingCallback())
        .as_markup()
    )

    try:
        if domain == 'tenchat.ru':
            user_posts = await api.fetch_tenchat_posts(username, amount)
        else:
            user_posts = await api.fetch_user_posts(domain, user_id, amount)
    except ClientError:
        return await started_message.edit_text('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª —Å–±–æ–π.')

    if await state.get_value('cancelled'):
        return await state.clear()

    await started_message.edit_reply_markup()
    await message.answer(f'üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {len(user_posts)} –ø–æ—Å—Ç–æ–≤. –°–æ—Ö—Ä–∞–Ω—è—é –≤ Google —Ç–∞–±–ª–∏—Ü—É...')

    await utils.unload_posts_to_sheets(domain, username, user_posts)
    await message.reply(
        f'‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google —Ç–∞–±–ª–∏—Ü—É.',
        reply_markup=menu_keyboard
    )


@router.callback_query(RegularParsingCallback.filter())
async def regular_parsing_callback(callback: CallbackQuery):
    is_paused = storage.is_paused()
    pause_status = '‚è∏Ô∏è –ü–∞—Ä—Å–∏–Ω–≥: –ø–∞—É–∑–∞' if is_paused else '‚úÖ –ü–∞—Ä—Å–∏–Ω–≥: —Ä–∞–±–æ—Ç–∞–µ—Ç'

    await callback.message.edit_text(
        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:',
        reply_markup=InlineKeyboardBuilder()
        .button(text='üë§ –ö–æ–≥–æ –ø–∞—Ä—Å–∏–º', callback_data=AccountsCallback())
        .button(text='‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å', callback_data=PeriodicityCallback())
        .button(text=pause_status, callback_data=TogglePauseCallback())
        .button(text='üîÑ –°–ø–∞—Ä—Å–∏—Ç—å —Å–µ–π—á–∞—Å', callback_data=ParseNowCallback(mode='menu'))
        .button(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data=MainMenuCallback())
        .adjust(1)
        .as_markup()
    )


@router.callback_query(PeriodicityCallback.filter())
async def periodicity_callback(callback: CallbackQuery, state: FSMContext):
    periodicity = storage.get_periodicity()
    if periodicity:
        await state.set_state(UserState.periodicity_input)
        await callback.message.answer(
            '–¢–µ–∫—É—â–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: '
            f'\n–ö–∞–∂–¥—ã–µ {periodicity.interval} –¥–Ω–µ–π, –≤ {periodicity.time.strftime('%H:%M')} –ø–æ –ú–æ—Å–∫–≤–µ.\n'
            '\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–ü—Ä–∏–º–µ—Ä: 1 21:00):',
            reply_markup=ForceReply()
        )
    else:
        await state.set_state(UserState.periodicity_input)
        await callback.message.answer(
            '–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞.'
            '\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–ü—Ä–∏–º–µ—Ä: 1 21:00):',
            reply_markup=ForceReply()
        )


@router.message(UserState.periodicity_input, F.text.regexp(r"^(\d+)\s+(\d{1,2}:\d{2})$").as_("match"))
async def periodicity_input(message: Message, state: FSMContext, match: Match[str]):
    interval = match.group(1)
    time_str = match.group(2)

    parsed_time = utils.parse_time(time_str)
    if not parsed_time:
        return await message.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 21:00)', reply_markup=ForceReply())

    storage.set_periodicity(
        interval=interval,
        time=parsed_time
    )

    await state.clear()
    await message.answer('‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', reply_markup=regular_parsing_keyboard)


@router.callback_query(AccountsCallback.filter())
async def accounts_callback(callback: CallbackQuery):
    inline_keyboard = InlineKeyboardBuilder()
    inline_keyboard.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data=AddAccountCallback())

    for account in storage.get_accounts():
        inline_keyboard.button(
            text=f'{account.domain.split('.')[0]} - {account.username}',
            callback_data=AccountInfoCallback(account_id=account.id)
        )

    await callback.message.edit_text(
        'üë§ –ö–æ–≥–æ –ø–∞—Ä—Å–∏–º:',
        reply_markup=inline_keyboard
        .button(text='–ù–∞–∑–∞–¥', callback_data=RegularParsingCallback())
        .button(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data=MainMenuCallback())
        .adjust(1)
        .as_markup()
    )


@router.callback_query(AddAccountCallback.filter())
async def add_account_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.add_account_input)
    await callback.message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
        '<code>—Å—Å—ã–ª–∫–∞ —Ç–∏–ø_–ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ç–∞–±–ª/—Å–µ—Ä–≤/–æ–±–∞)</code>\n'
        '–ü—Ä–∏–º–µ—Ä: <code>https://dtf.ru/danny —Ç–∞–±–ª</code>',
        reply_markup=ForceReply()
    )


@router.message(UserState.add_account_input, F.text.regexp(r'^\S+\s+\S+$'))
async def add_account_input(message: Message, state: FSMContext):
    url, mode = message.text.split(maxsplit=2)
    if mode not in PARSING_MODES:
        return await message.reply(
            '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>https://dtf.ru/danny —Ç–∞–±–ª</code>',
            reply_markup=ForceReply()
        )

    parsed_args = await utils.parse_url(url)
    if not parsed_args:
        return await message.reply(
            '‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç URL. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:',
            reply_markup=ForceReply()
        )

    domain, username, user_id = parsed_args
    storage.add_account(
        url=url,
        mode=mode,
        domain=domain,
        username=username,
        user_id=user_id
    )

    await state.clear()
    await message.answer('‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=regular_parsing_keyboard)


@router.callback_query(AccountInfoCallback.filter())
async def account_info_callback(callback: CallbackQuery, callback_data: AccountInfoCallback):
    account = storage.get_account(callback_data.account_id)
    if not account:
        return

    await callback.message.edit_text(
        f'üîó {account.url}'
        f'\n–†–µ–∂–∏–º: {account.mode}'
        '\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=InlineKeyboardBuilder()
        .button(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=EditAccountCallback(account_id=callback_data.account_id))
        .button(text='‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data=DeleteAccountCallback(account_id=callback_data.account_id))
        .button(text='üîÑ –°–ø–∞—Ä—Å–∏—Ç—å —Å–µ–π—á–∞—Å', callback_data=ParseAccountCallback(account_id=callback_data.account_id))
        .button(text='–ù–∞–∑–∞–¥', callback_data=AccountsCallback())
        .adjust(1)
        .as_markup()
    )


@router.callback_query(EditAccountCallback.filter())
async def edit_account_callback(callback: CallbackQuery, callback_data: EditAccountCallback, state: FSMContext):
    account = storage.get_account(callback_data.account_id)
    if not account:
        return

    await state.set_state(UserState.edit_account_input)
    await state.update_data(account_id=callback_data.account_id)
    await callback.message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
        '<code>—Å—Å—ã–ª–∫–∞ —Ç–∏–ø_–ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ç–∞–±–ª/—Å–µ—Ä–≤/–æ–±–∞)</code>\n'
        '–ü—Ä–∏–º–µ—Ä: <code>https://dtf.ru/danny —Ç–∞–±–ª</code>',
        reply_markup=ForceReply()
    )


@router.message(UserState.edit_account_input, F.text.regexp(r'^\S+\s+\S+$'))
async def account_edit_input(message: Message, state: FSMContext):
    url, mode = message.text.split(maxsplit=2)
    if mode not in PARSING_MODES:
        return await message.reply(
            '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>https://dtf.ru/danny —Ç–∞–±–ª</code>',
            reply_markup=ForceReply()
        )

    parsed_args = await utils.parse_url(url)
    if not parsed_args:
        return await message.reply(
            '‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç URL. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:',
            reply_markup=ForceReply()
        )

    account_id = await state.get_value('account_id')
    domain, username, user_id = parsed_args
    storage.update_account(
        account_id=account_id,
        url=url,
        mode=mode,
        domain=domain,
        username=username,
        user_id=user_id
    )

    await state.clear()
    await message.answer('‚úÖ –ê–∫–∫–∞—É–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!', reply_markup=regular_parsing_keyboard)


@router.callback_query(DeleteAccountCallback.filter())
async def delete_account_callback(callback: CallbackQuery, callback_data: DeleteAccountCallback):
    account = storage.get_account(callback_data.account_id)
    if not account:
        return

    storage.delete_account(callback_data.account_id)
    await callback.message.answer('‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω!', reply_markup=regular_parsing_keyboard)


@router.callback_query(ParseAccountCallback.filter())
async def account_parse_callback(callback: CallbackQuery, callback_data: ParseAccountCallback):
    account = storage.get_account(callback_data.account_id)
    if not account:
        return await callback.message.answer('‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')

    await callback.message.edit_text(f'üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}...')

    try:
        await parse_account(account)
        await callback.message.answer(f'‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!\n{account.url}', reply_markup=regular_parsing_keyboard)
    except Exception as e:
        await callback.message.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:\n{str(e)}\n{account.url}', reply_markup=regular_parsing_keyboard, parse_mode=None)


@router.callback_query(TogglePauseCallback.filter())
async def toggle_pause_callback(callback: CallbackQuery):
    storage.toggle_pause()
    await regular_parsing_callback(callback)


@router.callback_query(ParseNowCallback.filter())
async def parse_now_callback(callback: CallbackQuery, callback_data: ParseNowCallback):
    if callback_data.mode == 'menu':
        return await callback.message.edit_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–µ–π—á–∞—Å:',
            reply_markup=InlineKeyboardBuilder()
            .button(text='–û–±–∞', callback_data=ParseNowCallback(mode='–æ–±–∞'))
            .button(text='–í —Ç–∞–±–ª–∏—Ü—É', callback_data=ParseNowCallback(mode='—Ç–∞–±–ª'))
            .button(text='–ù–∞ —Å–µ—Ä–≤–µ—Ä', callback_data=ParseNowCallback(mode='—Å–µ—Ä–≤'))
            .button(text='–ù–∞–∑–∞–¥', callback_data=RegularParsingCallback())
            .button(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data=MainMenuCallback())
            .adjust(1)
            .as_markup()
        )

    storage_data = storage.load_storage()
    await callback.message.edit_text(f'üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {len(storage_data.accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...')

    success_count = 0
    fail_count = 0

    async def safe_parse(account):
        nonlocal success_count, fail_count
        try:
            await parse_account(account, mode=callback_data.mode)
            success_count += 1
        except Exception:
            fail_count += 1

    tasks = [safe_parse(account) for account in storage_data.accounts]
    await asyncio.gather(*tasks)

    await callback.message.answer(
        f'‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!\n–£—Å–ø–µ—à–Ω–æ: {success_count}\n–û—à–∏–±–∫–∏: {fail_count}',
        reply_markup=regular_parsing_keyboard
    )


@plugin.setup()
def include_router(dispatcher: Dispatcher):
    dispatcher.include_router(router)
